local M = {}

M.colors = {
	-- BACKGROUND COLOR
	BackgroundColor = BackgroundColor,
	-- TERMINAL COLORS
	Black = "#0D0C12",
	Red = "#EB6F92",
	Green = "#9ED979",
	Blue = "#31748F",
	Yellow = "#F6C177",
	Magenta = "#C4A7E7",
	Cyan = "#9CCFD8",
	White = "#E0DEF4",
	BrightBlack = "#505769",
	BrightRed = "#B4637A",
	BrightGreen = "#7DAC60",
	BrightYellow = "#c78e3e",
	BrightBlue = "#286983",
	BrightMagenta = "#907AA9",
	BrightCyan = "#56949F",
	BrightWhite = "#9EA6BC",
	-- OTHER COLORS
	Beige = "#EBBCBA",
	Surface = HSB(BackgroundColor, 0, 0, 0.04),
	Overlay = HSB(BackgroundColor, 0, 0, 0.08),
	Muted = HSB(BackgroundColor, 0, -0.1, 0.36),
	Subtle = HSB(BackgroundColor, 0, -0.1, 0.52),
	HighlightMed = HSB(BackgroundColor, 0, -0.1, 0.185),
	HighlightHigh = HSB(BackgroundColor, 0, -0.15, 0.26),
	None = 'NONE',
}

local c = M.colors

M.basics = {
	SpecialKey = { fg = c['Cyan'] },
	EndOfBuffer = { fg = c['Overlay'] },
	--TermCursor = {},
	--TermCursorNC = {},
	NonText = { fg = c['Muted'] },
		Whitespace = { fg = c['Overlay'] },
	Directory = { fg = c['Cyan'], bold = BoldOption },
	ErrorMsg = { fg = c['Red'], bold = BoldOption },
	IncSearch = { link = "CurSearch" },
	Search = { fg = c['BackgroundColor'], bg = c['White'] },
		CurSearch = { fg = c['BackgroundColor'], bg = c['Yellow'] },
		--QuickFixLine = {},
		Substitute = { link = "IncSearch" },
	MoreMsg = { fg = c['Magenta'] },
	ModeMsg = { fg = c['Subtle'] },
	LineNr = { fg = c['Muted'] },
		--LineNrAbove = {},
		--LineNrBelow = {},
	CursorLineNr = { fg = c['White'], bold = BoldOption },
	SignColumn = { fg = c['White'], bg = "NONE" },
		--CursorLineSign = {},
	FoldColumn = { fg = c['Muted'] },
		--CursorLineFold = {},
	Question = { fg = c['Yellow'] },
	StatusLine = { fg = c['Subtle'], bg = c['Surface'] },
		--MsgSeparator = {},
	StatusLineNC = { fg = c['Muted'], bg = Blend(c['Surface'], c['BackgroundColor'], 0.6) },
	Title = { fg = c['Cyan'], bold = BoldOption },
		--['@text.title'] = {},
	Visual = { bg = c['HighlightMed'] },
	--VisualNC = {},
	WarningMsg = { fg = c['Yellow'], bold = BoldOption },
	WildMenu = { link = "IncSearch" },
	Folded = { fg = c['White'], bg = c['Surface'] },
	DiffAdd = { bg = Blend(c['Cyan'], c['BackgroundColor'], 0.2) },
	DiffChange = { bg = Blend(c['Beige'], c['BackgroundColor'], 0.2) },
	DiffDelete = { bg = Blend(c['Red'], c['BackgroundColor'], 0.2) },
	DiffText = { bg = Blend(c['Beige'], c['BackgroundColor'], 0.2) },
	Conceal = { bg = "NONE" },
	SpellBad = { sp = c['Subtle'], undercurl = true },
	SpellCap = { sp = c['Subtle'], undercurl = true },
	SpellLocal = { sp = c['Subtle'], undercurl = true },
	SpellRare = { sp = c['Subtle'], undercurl = true },
	Pmenu = { fg = c['Subtle'], bg = c['Surface'] },
		PmenuKind = { fg = c['Cyan'], bg = c['Surface'] },
		PmenuExtra = { fg = c['Muted'], bg = c['Surface'] },
		NormalFloat = { bg = c['Surface'] },
	PmenuSel = { fg = c['White'], bg = c['Overlay'] },
		PmenuKindSel = { fg = c['Subtle'], bg = c['Overlay'] },
		PmenuExtraSel = { fg = c['Subtle'], bg = c['Overlay'] },
	PmenuSbar = { bg = c['Surface'] },
	PmenuThumb = { bg = c['Muted'] },
	TabLine = { fg = c['Subtle'], bg = c['Surface'] },
	TabLineSel = { fg = c['White'], bg = c['Overlay'], bold = BoldOption },
	TabLineFill = { bg = c['Surface'] },
	CursorColumn = { bg = c['Overlay'] },
	CursorLine = { bg = c['Overlay'] },
	ColorColumn = { bg = c['Surface'] },
	NormalNC = { fg = c['White'] }, --bg = c['BackgroundColor'] removed
	--MsgArea = {},
	--FloatBorder = {},
	WinBar = { fg = c['Subtle'], bg = c['Surface'] },
	WinBarNC = { fg = c['Muted'], bg = Blend(c['Surface'], c['BackgroundColor'], 0.6) },
	Cursor = { fg = c['White'], bg = c['HighlightHigh'] },
	FloatTitle = { link = "Directory" },
	--lCursor = {},
	Normal = { fg = c['White'] }, --bg = c['BackgroundColor'] removed
		VertSplit = { fg = c['Muted'] },
			--WinSeparator = {},
	--FloatShadow = {},
	--FloatShadowThrough = {},
	--RedrawDebugNormal = {},
	RedrawDebugClear = { fg = c['BackgroundColor'], bg = c['Yellow'] },
	RedrawDebugComposed = { fg = c['BackgroundColor'], bg = c['Blue'] },
	RedrawDebugRecompose = { fg = c['BackgroundColor'], bg = c['Red'] },
	Error = { fg = c['Red'] },
	--Todo = {},
		--['@text.todo'] = {},
	Constant = { fg = c['Yellow'] },
		--String = {},
			--['@string'] = {},
		Character = { fg = c['Yellow'] },
			--['@character'] = {},
		Number = { fg = c['Yellow'] },
			--Float = {},
				--['@float'] = {},
			--['@number'] = {},
		Boolean = { fg = c['Beige'] },
			--['@boolean'] = {},
		--['@constant'] = {},
		--['@lsp.type.enumMember'] = {},
	Identifier = { fg = c['White'] },
		Function = { fg = c['Beige'] },
			--['@function'] = {},
			--['@method'] = {},
			--['@lsp.type.decorator'] = {},
			--['@lsp.type.function'] = {},
			--['@lsp.type.method'] = {},
		--['@text.reference'] = {},
		['@parameter'] = { fg = c['Magenta'], italic = ItalicOption },
		['@field'] = { fg = c['Cyan'] },
		['@property'] = { fg = c['Cyan'], italic = ItalicOption },
		['@variable'] = { fg = c['White'], italic = ItalicOption },
		['@namespace'] = { link = "Include" },
		--['@lsp.type.parameter'] = {},
		--['@lsp.type.property'] = {},
		--['@lsp.type.variable'] = {},
	Statement = { fg = c['Blue'], bold = BoldOption },
		Conditional = { fg = c['Blue'] },
			--['@conditional'] = {},
		Repeat = { fg = c['Blue'] },
			--['@repeat'] = {},
		Label = { fg = c['Cyan'] },
			--['@label'] = {},
		Operator = { fg = c['Subtle'] },
			--['@operator'] = {},
		Keyword = { fg = c['Blue'] },
			--['@keyword'] = {},
		Exception = { fg = c['Blue'] },
			--['@exception'] = {},
	PreProc = { fg = c['Magenta'] },
		Include = { fg = c['Blue'] },
			--['@include'] = {},
		Define = { fg = c['Magenta'] },
			['@constant.macro'] = { fg = c['Yellow'] },
			--['@define'] = {},
		Macro = { fg = c['Magenta'] },
			--['@macro'] = {},
			['@function.macro'] = { link = "Function" },
			--['@lsp.type.macro'] = {},
		--PreCondit = {},
		--['@preproc'] = {},
	Type = { fg = c['Cyan'] },
		--StorageClass = {},
			--['@storageclass'] = {},
		--Structure = {},
			--['@lsp.type.class'] = {},
			--['@lsp.type.enum'] = {},
			--['@lsp.type.interface'] = {},
			--['@lsp.type.namespace'] = {},
			--['@lsp.type.struct'] = {},
		--Typedef = {},
			--['@type.definition'] = {},
			--['@lsp.type.typeParameter'] = {},
		--['@type'] = {},
		--['@lsp.type.type'] = {},
	Special = { fg = c['Cyan'] },
		--Tag = {},
			--['@tag'] = {},
		--SpecialChar = {},
			['@string.escape'] = { fg = c['Blue'] },
			['@string.special'] = { link = "String" },
			['@character.special'] = { link = "Character" },
		Delimiter = { fg = c['Subtle'] },
			--['@punctuation'] = {},
		SpecialComment = { fg = c['Magenta'] },
		Debug = { fg = c['Beige'] },
			--['@debug'] = {},
		['@constant.builtin'] = { fg = c['Yellow'], bold = BoldOption },
		['@function.builtin'] = { fg = c['Beige'], bold = BoldOption },
		--['@constructor'] = {},
	DiagnosticError = { fg = c['Red'] },
		DiagnosticVirtualTextError = { fg = c['Red'], bg = Blend(c['Red'], c['BackgroundColor'], 0.1) },
		--DiagnosticFloatingError = {},
		--DiagnosticSignError = {},
	DiagnosticWarn = { fg = c['Yellow'] },
		DiagnosticVirtualTextWarn = { fg = c['Yellow'], bg = Blend(c['Yellow'], c['BackgroundColor'], 0.1) },
		--DiagnosticFloatingWarn = {},
		--DiagnosticSignWarn = {},
	DiagnosticInfo = { fg = c['Cyan'] },
		DiagnosticVirtualTextInfo = { fg = c['Cyan'], bg = Blend(c['Cyan'], c['BackgroundColor'], 0.1) },
		--DiagnosticFloatingInfo = {},
		--DiagnosticSignInfo = {},
	DiagnosticHint = { fg = c['White'] },
		DiagnosticVirtualTextHint = { fg = c['White'], bg = Blend(c['White'], c['BackgroundColor'], 0.1) },
		--DiagnosticFloatingHint = {},
		--DiagnosticSignHint = {},
	--DiagnosticOk = {},
		--DiagnosticVirtualTextOk = {},
		--DiagnosticFloatingOk = {},
		--DiagnosticSignOk = {},
	DiagnosticUnderlineError = { sp = c['Red'], undercurl = true },
	DiagnosticUnderlineHint = { sp = c['Magenta'], undercurl = true },
	DiagnosticUnderlineInfo = { sp = c['Cyan'], undercurl = true },
	DiagnosticUnderlineWarn = { sp = c['Yellow'], undercurl = true },
	--DiagnosticUnderlineOk = {},
	--DiagnosticDeprecated = {},
	Comment = { fg = c['Subtle'], italic = ItalicOption },
		--DiagnosticUnnecessary = {},
		--['@text.literal'] = {},
		--['@comment'] = {},
		--['@lsp.type.comment'] = {},
	['@text'] = { fg = c['White'] },
	Underlined = { fg = c['Magenta'], underline = UnderlineOption },
		['@text.underline'] = { underline = UnderlineOption },
		['@text.uri'] = { fg = c['Magenta'] },
	--['@lsp'] = {},
	MatchParen = { fg = c['Blue'], bg = Blend(c['Blue'], c['BackgroundColor'], 0.25) },
	--Ignore = {},
}
M.basicsother = {
	NvimInternalError = { link = "ErrorMsg" },
	DiagnosticDefaultError = { link = "DiagnosticError" },
	DiagnosticDefaultHint = { link = "DiagnosticHint" },
	DiagnosticDefaultInfo = { link = "DiagnosticInfo" },
	DiagnosticDefaultWarn = { link = "DiagnosticWarn" },
	diffAdded = { link = "DiffAdd" },
	diffChanged = { link = "DiffChange" },
	diffRemoved = { link = "DiffDelete" },
	StatusLineTerm = { fg = c['BackgroundColor'], bg = c['Blue'] },
	StatusLineTermNC = { fg = c['BackgroundColor'], bg = Blend(c['Blue'], c['BackgroundColor'], 0.6) },
	--FloatBorder = make_border(), --FIX
}
M.treesitter = {
	--@variable defined under basics
		['@variable.builtin'] = { fg = c['Red'], bold = BoldOption },
		['@variable.parameter'] = { fg = c['Magenta'], italic = ItalicOption },
		['@variable.member'] = { fg = c['Cyan'] },
	--@string defined under basics
		['@string.regexp'] = { fg = c['Magenta'] },
		--@string.special defined under basics
			['@string.special.symbol'] = { link = "Identifier" },
			['@string.special.url'] = { fg = c['Magenta'] },
	--@keyword defined under basics
		['@keyword.operator'] = { fg = c['Subtle'] },
		['@keyword.import'] = { fg = c['Blue'] },
		['@keyword.storage'] = { fg = c['Cyan'] },
		['@keyword.repeat'] = { fg = c['Blue'] },
		['@keyword.return'] = { fg = c['Blue'] },
		['@keyword.debug'] = { fg = c['Beige'] },
		['@keyword.exception'] = { fg = c['Blue'] },
		['@keyword.conditional'] = { fg = c['Blue'] },
			--['@keyword.conditional.ternary'] = {},
		['@keyword.directive'] = { fg = c['Magenta'] },
			--['@keyword.directive.define'] = {},
	--@punctuation defined under basics
		['@punctuation.delimiter'] = { fg = c['Subtle'] },
		['@punctuation.bracket'] = { fg = c['Subtle'] },
		['@punctuation.special'] = { fg = c['Subtle'] },
	--@comment defined under basics
		['@comment.error'] = { fg = c['Red'] },
		['@comment.warning'] = { fg = c['Yellow'] },
		['@comment.todo'] = { fg = c['Beige'], bg = Blend(c['Beige'], c['BackgroundColor'], 0.2) },
		['@comment.hint'] = { fg = c['Magenta'], bg = Blend(c['Magenta'], c['BackgroundColor'], 0.2) },
		['@comment.info'] = { fg = c['Cyan'], bg = Blend(c['Cyan'], c['BackgroundColor'], 0.2) },
		['@comment.note'] = { fg = c['Blue'], bg = Blend(c['Blue'], c['BackgroundColor'], 0.2) },
	['markdownDelimiter'] = { fg = c['Subtle'] },
	['markdownH1'] = { fg = c['Magenta'], bold = BoldOption },
	['markdownH1Delimiter'] = { link = "markdownH1" },
	['markdownH2'] = { fg = c['Cyan'], bold = BoldOption },
	['markdownH2Delimiter'] = { link = "markdownH2" },
	['markdownH3'] = { fg = c['Beige'], bold = BoldOption },
	['markdownH3Delimiter'] = { link = "markdownH3" },
	['markdownH4'] = { fg = c['Yellow'], bold = BoldOption },
	['markdownH4Delimiter'] = { link = "markdownH4" },
	['markdownH5'] = { fg = c['Blue'], bold = BoldOption },
	['markdownH5Delimiter'] = { link = "markdownH5" },
	['markdownH6'] = { fg = c['Cyan'], bold = BoldOption },
	['markdownH6Delimiter'] = { link = "markdownH6" },
	['markdownLinkText'] = { link = "markdownUrl" },
	['markdownUrl'] = { fg = c['Magenta'], sp = c['Magenta'], underline = UnderlineOption },
	--@markup not defined
		['@markup.strong'] = { bold = BoldOption },
		['@markup.italic'] = { italic = ItalicOption },
		['@markup.strikethrough'] = { strikethrough = true },
		['@markup.underline'] = { underline = UnderlineOption },
		['@markup.heading'] = { fg = c['Cyan'], bold = BoldOption },
			['@markup.heading.1.markdown'] = { link = "markdownH1" },
			['@markup.heading.2.markdown'] = { link = "markdownH2" },
			['@markup.heading.3.markdown'] = { link = "markdownH3" },
			['@markup.heading.4.markdown'] = { link = "markdownH4" },
			['@markup.heading.5.markdown'] = { link = "markdownH5" },
			['@markup.heading.6.markdown'] = { link = "markdownH6" },
			['@markup.heading.1.marker.markdown'] = { link = "markdownH1Delimiter" },
			['@markup.heading.2.marker.markdown'] = { link = "markdownH2Delimiter" },
			['@markup.heading.3.marker.markdown'] = { link = "markdownH3Delimiter" },
			['@markup.heading.4.marker.markdown'] = { link = "markdownH4Delimiter" },
			['@markup.heading.5.marker.markdown'] = { link = "markdownH5Delimiter" },
			['@markup.heading.6.marker.markdown'] = { link = "markdownH6Delimiter" },
		['@markup.quote'] = { fg = c['Subtle'] },
		['@markup.math'] = { link = "Special" },
		['@markup.environment'] = { link = "Macro" },
			['@markup.environment.name'] = { link = "@type" },
		--@markup.link not defined
			['@markup.link.label'] = { fg = c['White'] },
			['@markup.link.url'] = { fg = c['Magenta'] },
		['@markup.list'] = { fg = c['White'] },
			['@markup.list.checked'] = { fg = c['Cyan'], bg = Blend(c['Cyan'], c['BackgroundColor'], 0.1) },
			--['@markup.list.unchecked'] = {},
	--@function defined under basics
		['@function.method'] = { fg = c['Beige'] },
		['@function.method.call'] = { fg = c['Magenta'] },
	--@type defined under basics
		['@type.builtin'] = { fg = c['Cyan'], bold = BoldOption },
	['@module'] = { fg = c['White'] },
		['@module.builtin'] = { fg = c['White'], bold = BoldOption },
	--@number defined under basics
		['@number.float'] = { link = "Number" },
	--@tag defined under basics
		['@tag.attribute'] = { fg = c['Magenta'] },
		['@tag.delimiter'] = { fg = c['Subtle'] },
	['@conceal'] = { link = "Conceal" },
	['@diff.plus'] = { fg = c['Cyan'], bg = Blend(c['Cyan'], c['BackgroundColor'], 0.2) },
	['@diff.minus'] = { fg = c['Red'], bg = Blend(c['Red'], c['BackgroundColor'], 0.2) },
	['@diff.delta'] = { bg = Blend(c['Beige'], c['BackgroundColor'], 0.2) },
}
M.legacy = {
	['@attribute.diff'] = { fg = c['Yellow'] },
	['@class'] = { fg = c['Cyan'] },
	['@interface'] = { fg = c['Cyan'] },
	['@regexp'] = { link = "String" },
	['@symbol'] = { link = "Identifier" },
	--@text defined under basics
		['@text.danger'] = { fg = c['Red'] },
		--@text.diff not defined
			['@text.diff.add'] = { fg = c['Cyan'], bg = Blend(c['Cyan'], c['BackgroundColor'], 0.2) },
			['@text.diff.delete'] = { fg = c['Red'], bg = Blend(c['Red'], c['BackgroundColor'], 0.2) },
		['@text.emphasis'] = { italic = ItalicOption },
		['@text.environment'] = { link = "Macro" },
			['@text.environment.name'] = { link = "Type" },
		['@text.math'] = { link = "Special" },
		['@text.note'] = { link = "SpecialComment" },
		['@text.strike'] = { strikethrough = true },
		['@text.strong'] = { bold = BoldOption },
		--@text.title defined under basics
			['@text.title.1.markdown'] = { link = "markdownH1" },
			['@text.title.1.marker.markdown'] = { link = "markdownH1Delimiter" },
			['@text.title.2.markdown'] = { link = "markdownH2" },
			['@text.title.2.marker.markdown'] = { link = "markdownH2Delimiter" },
			['@text.title.3.markdown'] = { link = "markdownH3" },
			['@text.title.3.marker.markdown'] = { link = "markdownH3Delimiter" },
			['@text.title.4.markdown'] = { link = "markdownH4" },
			['@text.title.4.marker.markdown'] = { link = "markdownH4Delimiter" },
			['@text.title.5.markdown'] = { link = "markdownH5" },
			['@text.title.5.marker.markdown'] = { link = "markdownH5Delimiter" },
			['@text.title.6.markdown'] = { link = "markdownH6" },
			['@text.title.6.marker.markdown'] = { link = "markdownH6Delimiter" },
		['@text.warning'] = { fg = c['Yellow'] },
	['@todo'] = { link = "Todo" },
}
M.telescope = {
	TelescopeNormal = { bg = c['Surface'] }, -- Default link: Normal (default rose-pine surface)
		TelescopeBorder = { fg = c['Muted'], bg = c['Surface'] }, -- (default rose-pine surface)
			--TelescopePromptBorder = {},
			--TelescopeResultsBorder = {},
			--TelescopePreviewBorder = {},
			TelescopeTitle = { fg = c['Cyan'], bold = BoldOption },
				--TelescopePromptTitle = {},
				--TelescopeResultsTitle = {},
				--TelescopePreviewTitle = {},
		--TelescopePromptNormal = {},
		--TelescopeResultsNormal = {},
		--TelescopePreviewNormal = {},
			--TelescopePreviewMessage = {},
				TelescopePreviewMessageFillchar = { fg = c['Muted'] },
	TelescopeSelection = { fg = c['White'], bg = c['Overlay'] }, -- Default link: Visual
		TelescopeSelectionCaret = { fg = c['Beige'], bg = c['Overlay'] },
	--TelescopeMultiIcon = {}, -- Default link: Identifier
	--TelescopeMultiSelection = {}, -- Default link: Type
	TelescopeMatching = { fg = c['Beige'] }, -- Default link: Special
	TelescopePromptPrefix = { fg = c['Subtle'] }, -- Default link: Identifier
	--TelescopePromptCounter = {}, -- Default link: NonText
	--TelescopeResultsComment = {}, -- Default link: Comment
	--TelescopeResultsNumber = {}, -- Default link: Number
	--TelescopeResultsIdentifier = {}, -- Default link: Identifier
	--TelescopeResultsLineNr = {}, -- Default link: LineNr
	--TelescopeResultsVariable = {}, -- Default link: SpecialChar
	--TelescopeResultsStruct = {}, -- Default link: Struct
	--TelescopeResultsOperator = {}, -- Default link: Operator
	--TelescopeResultsDiffAdd = {}, -- Default link: DiffAdd
	--TelescopeResultsMethod = {}, -- Default link: Method
	--TelescopeResultsFunction = {}, -- Default link: Function
	--TelescopeResultsField = {}, -- Default link: Function
	--TelescopeResultsConstant = {}, -- Default link: Constant
	--TelescopeResultsClass = {}, -- Default link: Function
	--TelescopeResultsDiffChange = {}, -- Default link: DiffChange
	--TelescopeResultsSpecialComment = {}, -- Default link: SpecialComment
	--TelescopePreviewSticky = {}, -- Default link: Keyword
	--TelescopePreviewHyphen = {}, -- Default link: NonText
	--TelescopePreviewExecute = {}, -- Default link: String
	--TelescopePreviewWrite = {}, -- Default link: Statement
	--TelescopePreviewRead = {}, -- Default link: Constant
	--TelescopePreviewSocket = {}, -- Default link: Statement
	--TelescopePreviewLink = {}, -- Default link: Special
	--TelescopePreviewBlock = {}, -- Default link: Constant
	--TelescopePreviewDirectory = {}, -- Default link: Directory
	--TelescopePreviewCharDev = {}, -- Default link: Constant
	--TelescopePreviewPipe = {}, -- Default link: Constant
	--TelescopePreviewMatch = {}, -- Default link: Search
	--TelescopePreviewLine = {}, -- Default link: Visual
	--TelescopeResultsDiffUntracked = {}, -- Default link: NonText
	--TelescopeResultsDiffDelete = {}, -- Default link: DiffDelete
	--TelescopePreviewSize = {}, -- Default link: String
	--TelescopePreviewDate = {}, -- Default link: Directory
	--TelescopePreviewGroup = {}, -- Default link: Constant
	--TelescopePreviewUser = {}, -- Default link: Constant
}
M.nvimcmp = {
	CmpItemAbbr = { fg = c['Subtle'] },
	CmpItemAbbrDeprecated = { fg = c['Subtle'], strikethrough = true },
	CmpItemAbbrMatch = { fg = c['White'], bold = BoldOption },
	CmpItemAbbrMatchFuzzy = { fg = c['White'], bold = BoldOption },
	CmpItemKind = { fg = c['Subtle'] },
	CmpItemKindClass = { link = "StorageClass" },
	CmpItemKindFunction = { link = "Function" },
	CmpItemKindInterface = { link = "Type" },
	CmpItemKindMethod = { link = "PreProc" },
	CmpItemKindSnippet = { link = "String" },
	CmpItemKindVariable = { link = "Identifier" },
}
M.yankhighlight = {
	YankHighlight = { fg = c['Black'], bg = c['White'] },
}
M.statusline = {
	StatuslineTextMain = { fg = c['White'], bg = c['Black'] },
	StatuslineTextAccent = { fg = c['BrightBlack'], bg = c['Black'] },
	StatuslineModeNormal = { fg = c['White'], bg = c['BrightBlue'] },
	StatuslineModeInsert = { fg = c['White'], bg = c['BrightCyan'] },
	StatuslineModeVisual = { fg = c['White'], bg = c['BrightYellow'] },
	StatuslineModeReplace = { fg = c['White'], bg = c['BrightRed'] },
	StatuslineModeCommand = { fg = c['White'], bg = c['BrightBlack'] },
	StatuslineModeSelect = { fg = c['White'], bg = c['BrightMagenta'] },
	StatuslineFiletype = { fg = c['White'], bg = c['Black'] },
	StatuslineSaved = { fg = c['White'], bg = c['BrightGreen'] },
	StatuslineNotSaved = { fg = c['White'], bg = c['BrightRed'] },
	StatuslineReadOnly = { fg = c['White'], bg = c['BrightYellow'] },
	StatuslineLspOn = { fg = c['BrightWhite'], bg = c['Black'] },
	StatuslineLspError = { fg = c['Red'], bg = c['Black'] },
	StatuslineLspWarning = { fg = c['Yellow'], bg = c['Black'] },
	StatuslineLspInfo = { fg = c['Blue'], bg = c['Black'] },
	StatuslineLspHint = { fg = c['White'], bg = c['Black'] },
	StatuslineHarpoon = { fg = c['White'], bg = c['BrightMagenta'] },
}

return M
